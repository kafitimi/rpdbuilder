[Заголовки]
дисциплина = Программирование
код = Б1.В.ОД.3
план = RUPlikeivt16.xml
автор = Павлов А.В., к.\,ф.-м.\,н., доцент кафедры информационных технологий ИМИ, av.pavlov@s-vfu.ru
год = 2016
math = 1

[Аннотация]
цель  = овладение основами программирования на языках Питон (Python) и Си/Си++
краткоесодержание = Основы синтаксиса и семантики императивных языков высокого уровня Python и С++. Переменные, типы, выражения и присваивание. Условные и циклические структуры. Текстовый ввод/вывод. Функции и передача параметров. Структурированная декомпозиция.

знать = способы передачи параметров в функцию в языке Си++;
		несколько методов сортировки, включая быструю сортировку;
уметь = анализировать, объяснять поведение, модифицировать, тестировать небольшие программы на языках Питон и Си++, использующие любую комбинацию следующих понятий: простые вычисления, ветвление, итерация, простой ввод-вывод, в том числе в/из текстовых файлов, массивы (списки), функции; 
		сравнивать два алгоритма для решения несложной задачи;
владетьнавыками= отладки программ на языке Си++ в современной инструментальной среде; 
		написания небольших программ на языках Питон и Си++ с использованием условного оператора и различных видов циклов;

опирается= ---
опорадля= Б1.Б.23~-- Операционные системы,
	Б1.В.ОД.1~-- Компьютерные сети и телекоммуникации,
	Б1.В.ОД.4~-- Структуры и алгоритмы обработки данных,
	Б1.В.ОД.5~-- Web-программирование,
	Б1.В.ОД.6~-- Программирование .NET,
	Б1.В.ОД.7~-- Объектно-ориентированное программирование,
	Б1.В.ОД.8~-- Языки программирования и методы трансляции


[Распределение часов]
список= Тема 1. Язык Питон: простые типы и основы синтаксиса.|1.9*||1.9*||1.9*|||||1.9*
		Тема 2. Язык Питон: структурированные типы.          |1.6*||1.6*||1.6*|||||2.4*
		Тема 3. Язык Питон: функции и рекурсия.	             |1.1*||1.1*||1.1*|||||1.2*
		Тема 4. Язык Си: простые типы и основы синтаксиса.   |    |||||||||1.1*
		Тема 5. Язык Си/Си++: структурированные типы.        |    |||||||||
		Тема 6. Язык Си: функции и рекурсия.	             |    |||||||||
		Тема 7. Алгоритмы сортировки.	                     |    |||||||||
		Тема 8. Язык Си++: классы. Знакомство с STL.         |    |||||||||


[Содержание тем]
Тема1=Что такое программирование? Компилируемые и интерпретируемые языки. Статическая и динамическая типизация. Знакомство с Питоном. Среда IDLE. Окно интерпретатора. REPL-цикл. Написание, редактирование и запуск программ. Числовые типы. Логический тип. Арифметические и логические операторы. Оператор присваивания. Модуль math. Программы линейной структуры. Блок-схемы. Операторы ветвления и цикла, роль отступов. Строковый тип. Перебор строк. Ввод с клавиатуры. Простое преобразование типов. Встроенные средства документации, функция help(). Функции dir(). 
Тема2=Кортежи и списки в Питоне. Индексация, нотация диапазонов. Поиск минимального/максимального элемента. Строки. Unicode, Python 2 и Python 3. Словари. Семантика присваивания для сложных типов. Двумерные массивы как списки: индексация, ввод, заполнение случайными значениями. Перебор списков. Перебор словаря, методы keys(), values(), items().
Тема3=Функции. Видимость переменных. Передача параметров. Значения параметров по умолчанию. Рекурсия. Стандартная библиотека, менеджер пакетов pip. 
Тема4=Язык Си. Функция main(). Числовые типы. Объявления переменных. Компиляция программы на Си, заголовочные и библиотечные файлы. Стандартная библиотека. Логический тип. Арифметические и логические операторы. Оператор присваивания. Неявное преобразование типов. Блоки. Операторы ветвления и цикла, оператор выбора. Вычисление сумм и произведений. Символьный тип, символьные константы, коды символов. Unicode и широкий символьный тип. Ввод-вывод с текстовыми файлами.
Тема5=Указатели, типизированные и нетипизированные. Разыменование. Средства отладки Visual Studio. Массивы. Строки. Структуры. Перечисления. malloc() и new().
Тема6=Функции. Передача параметров по ссылке и по значению. Декомпозиция задачи <<сверху вниз>>. Видимость переменных. Статические переменные. Глобальные переменные.  
Тема7=Сортировка пузырьком. Сортировка вставками. Сортировка слиянием. Быстрая сортировка.
Тема8=Перегрузка функций и перегрузка операторов. Классы и объекты; конструкторы и деструкторы. Методы. Классы потокового ввода-вывода. Некоторые контейнерные классы STL.


[Формы и технологии занятий]
текст = При проведении занятий и организации СРС используются традиционные
		технологии сообщающего обучения, предполагающие передачу информации 
		в~готовом виде: проведение лекционных занятий, самостоятельная работа 
		с~источниками. Предусмотрено использование активных и интерактивных форм
		обучения с целью формирования и развития профессиональных навыков
		студентов~--- выполнение лабораторных работ, подразумевающих
		применение компьютерных технологий.


[СРС]
табл=1|Язык Питон: простые типы и основы синтаксиса.|Решение задач |24|Сдача домашних заданий лично, неоконченных лаб. работ
	 2|Язык Питон: структурированные типы.          |Решение задач |30|Сдача домашних заданий лично, неоконченных лаб. работ
	 3|Язык Питон: функции и рекурсия.	            |Решение задач |15|Сдача домашних заданий лично, неоконченных лаб. работ
	 4|Язык Си: простые типы и основы синтаксиса.   |Решение задач |14|Сдача домашних заданий лично, неоконченных лаб. работ
	 5|Язык Си/Си++: структурированные типы.        |Решение задач |13|Сдача домашних заданий лично, неоконченных лаб. работ
	 6|Язык Си: функции и рекурсия.	                |Решение задач |13|Сдача домашних заданий лично, неоконченных лаб. работ
	 7|Алгоритмы сортировки.	                    |Решение задач |13|Сдача домашних заданий лично, неоконченных лаб. работ
	 8|Язык Си++: классы. Знакомство с STL.         |Решение задач |12|Сдача домашних заданий лично, неоконченных лаб. работ
	  |ИТОГО                                        |              |134| 


[Рейтинговый регламент]
табл = Посещение занятий  |6 |10
	   Лабораторные работы|15|24
	   Домашние задания   |11|17
	   Контрольные тесты  |13|19
	   \bf Кол-во баллов для допуска к экзамену в 1 сем. (min--max)|\bf 45|\bf 70
	   Посещение занятий  |6 |10
	   Лабораторные работы|12|18
	   Домашние задания   |16|25
	   Контрольные тесты  |11|17
	   \bf Кол-во баллов для допуска к экзамену вo 2 сем. (min--max)|\bf 45|\bf 70


[Показатели оценивания]
уровень1 = высокий 
критерии1 = может правильно написать на языке Си функцию, изменяющую аргументы, переданные по ссылке, например заполняющую структуру;\newline
			может объяснить механизм работы оператора присваивания для кортежей, списков, словарей в языке Питон;\newline  
			может реализовать сортировку пузырьком и быструю сортировку на языке Си, объяснить преимущество последней;\newline
			может найти ошибку типа <<ошибка на единицу>> в некорректно реализованных на языках Си или Питон функциях сортировки списка или массива, агрегации списка или массива, обработки строки;\newline
			может найти ошибку в циклической программе, используя отладку в инструментальной среде;\newline  
			может написать, запустить, протестировать и отладить на языках Си или Питон программу, вычисляющую агрегирующую функцию от строки или числового массива или списка, в том числе рекурсивно;\newline
			может объяснить, какую агрегирующую функцию от числового массива или списка вычисляет данная функция (в том числе рекурсивная), в пределах 20 строк;\newline
			имея документацию, может написать вызов на языках Си и Питон библиотечной функции для конкретной задачи, правильно организовав подключение нужных пакетов/заголовочных файлов и передав параметры;\newline
			может построить пример ввода, на котором предъявленная дефектная реализация простой программы обработки массива/списка на языках Си или Питон дает неверный результат;\newline
			может пользоваться для отладки программы на Си++: точками останова, в том числе условными, пошаговым исполнением, шагом с заходом и с обходом по вызовам функций, просмотром значений переменных и памяти остановленной программы.
оценка1 = отлично

уровень2 = 	базовый
критерии2 = может объяснить, почему изменяются значения переменных в вызывающей функции при передаче по ссылке на языке Си;\newline
			может реализовать сортировку пузырьком на языке Си;\newline
			может найти ошибку типа <<ошибка на единицу>> в некорректно реализованных на языках Си или Питон функциях сортировки списка или массива, агрегации списка или массива, обработки строки;\newline
			может написать, запустить, протестировать и отладить на языках Си или Питон программу, вычисляющую агрегирующую функцию от числового массива или списка;\newline
			может объяснить, какую агрегирующую функцию от числового массива или списка вычисляет данная функция, в пределах 15 строк;\newline
			имея документацию и примеры использования, может написать вызов на языках Си и Питон библиотечной функции для конкретной задачи, правильно организовав подключение нужных пакетов/заголовочных файлов и передав параметры;\newline
			может вручную трассировать по тексту несложные циклические программы в пределах 4 итераций и правильно находить значения переменных после их завершения при различных входных данных;\newline
			может пользоваться для отладки программы на Си++: точками останова, пошаговым исполнением, шагом с заходом и с обходом по вызовам функций, просмотром значений переменных остановленной программы.
оценка2 = хорошо

уровень3 = 	мини\-мальный
критерии3 = может объяснить, почему изменяются значения переменных в вызывающей функции при передаче по ссылке;\newline
			может написать, запустить, протестировать и отладить на языках Си или Питон программу, вычисляющую минимум или максимум чисел, удовлетворяющих некоторому условию, из числового массива или списка;\newline
			может объяснить, какую агрегирующую функцию от числового массива или списка вычисляет данная функция, в пределах 15 строк;\newline
			может вручную трассировать по тексту несложные циклические программы в пределах 4 итераций и правильно находить значения переменных после их завершения при различных входных данных;\newline
			может пользоваться для отладки программы на Си++: точками останова, пошаговым исполнением, просмотром значений переменных остановленной программы.
оценка3 = удовл.

уровень4 = 	не освоены
критерии4 = не способен выполнить три или более пунктов из вышеперечисленного
оценка4 = не зачтено


[Методические указания]
текст = Важное значение в освоении дисциплины имеет самостоятельная работа. Ключевым
		ее видом является самостоятельное написание программ. Только самостоятельное
		практическое написание программ, поиск и исправление ошибок в них могут обеспечить 
		действительное понимание тем курса.
		\par
		Последовательное и добросовестное изучение курса является основой для
		выработки навыков алгоритмизации, чтения и отладки текстов программ,
		ключевых для данного направления подготовки.

[Типовые задания]
кодыкомпетенций1=ОПК-2, ПК-1
показатель1=знать способы передачи параметров в функцию в языке Си++;
тема1=6
задания1=Какие значения будут напечатаны данной программой:
		  \begin{verbatim}
		  void f(int x) {
		    printf("%%d",x); x++;} 
		  void g(int &x) {
		    printf("%%d",x); x++;}
		  int main(){
		    int x = 1; f(x); g(x); 
		    return 0;}
		  \end{verbatim}

кодыкомпетенций2=ОПК-2, ПК-1
показатель2=знать несколько методов сортировки, включая быструю сортировку;
тема2=7
задания2=Сколько раз будет выполнена функция \texttt{swap()} для массива \texttt{A\,=\,\{3,2,5,4,1\}} при следующей реализации сортировки пузырьком:
	\begin{verbatim}
	for (i=0; i<N; ++i) 
	  for (j=i; j<N; ++j)
	    if (a[i]>=a[j]) 
	      swap(A, i, j);\end{verbatim}
	Как можно улучшить эту реализацию? 

кодыкомпетенций3=ОПК-2, ПК-1
показатель3=уметь анализировать, объяснять поведение, модифицировать, тестировать и отлаживать небольшие программы на языках Питон и Си++, использующие любую комбинацию следующих понятий: простые вычисления, ветвление, итерация, простой ввод-вывод, в том числе в/из текстовых файлов, массивы (списки), функции; 
тема3=1, 4 
задания3=Даны действительные числа $a$, $b$, $c$, причем $a\ne 0$. Даны ординаты $y_1$, $y_2$, $y_3$ точек $L$, $M$, $N$ на прямой $ax+by+c=0$. Вывести координаты точек $L$, $M$, $N$ в порядке слева направо (или сверху вниз, если прямая вертикальна).

кодыкомпетенций4=ОПК-2, ПК-1
показатель4=уметь анализировать, объяснять поведение, модифицировать, тестировать и отлаживать небольшие программы на языках Питон и Си++, использующие любую комбинацию следующих понятий: простые вычисления, ветвление, итерация, простой ввод-вывод, в том числе в/из текстовых файлов, массивы (списки), функции; 
тема4=2
задания4=Приведите пример списка {\tt L} из трех чисел, для которого данный код напечатает 2:\newline
	\verb!i, M, iM = 0, 0, -1!\newline
	\verb!for x in L:!\newline
	\verb!  if x%%2 == 1:!\newline
	\verb!    if x > M:!\newline
	\verb!      M = x!\newline
	\verb!      iM = i!\newline
	\verb!  i += 1!\newline
	\verb!if iM >= 0:!\newline
	\verb!  print(iM) !

кодыкомпетенций5=ОПК-2, ПК-1
показатель5=анализировать, объяснять поведение, модифицировать, тестировать небольшие программы на языках Питон и Си++, использующие любую комбинацию следующих понятий: простые вычисления, ветвление, итерация, простой ввод-вывод, в том числе в/из текстовых файлов, массивы (списки), функции; 
тема5=3
задания5=Имеется некорректно написанная рекурсивная функция, подсчитывающая количество вхождений числа {\tt x} в список {\tt A}:\newline
	\verb!def occurs(x, A):!\newline
	\verb!    if A[0] == x:!\newline
	\verb!        return 1+occurs(x, A[1:])!\newline
	\verb!    return occurs(x, A[1:])!\newline
	Исправьте ее

кодыкомпетенций6=ОПК-2, ПК-1
показатель6=анализировать, объяснять поведение, модифицировать, тестировать небольшие программы на языках Питон и Си++, использующие любую комбинацию следующих понятий: простые вычисления, ветвление, итерация, простой ввод-вывод, в том числе в/из текстовых файлов, массивы (списки), функции; 
тема6=6
задания6=Имеется некорректно написанная рекурсивная функция, подсчитывающая количество вхождений числа {\tt x} в массив {\tt A} длины {\tt n}:\newline
	\verb!int occurs(int x, int n, int* A) {!\newline
	\verb!  if (A[0] == x)!\newline
	\verb!    return 1+occurs(x, n-1, A+1);!\newline
	\verb!  return occurs(x, n-1, A+1);!\newline
	\verb!}!\newline
	Исправьте ее

кодыкомпетенций7=ОПК-2, ПК-1
показатель7=владеть навыками отладки программ на языке Си++ в современной инструментальной среде; 
тема7=4
задания7=Имеется программа нахождения трех максимальных членов числовой последовательности, 
    предполагается, что среди чисел могут быть одинаковые. \newline
	\verb!#include <stdio.h>!\newline
	\verb!int main()!\newline
	\verb!{!\newline
	\verb!  int i, n, x, max1, max2, max3;!\newline
	\verb!  scanf("%d", &n);!\newline
	\verb!  if (n < 3) return -1;!\newline
	\verb!  scanf("%d", &x);!\newline
	\verb!  max1 = max2 = max3 = x;!\newline
	\verb!  for (i=1; i<n; ++i){!\newline
	\verb!    scanf(" %d", &x);!\newline
	\verb!    if (x > max1) max1 = x; else!\newline
	\verb!    if (x >= max2) max2 = x; else !\newline
	\verb!    if (x >= max3) max3 = x;!\newline
	\verb!  }!\newline
	\verb!  printf("max=%d,max2=%d,max3=%d",!\newline
	\verb!         max1, max2, max3);!\newline
	\verb!  return 0;!\newline
	\verb!}!\newline
	Приведите пример входных данных, для которых она работает правильно,
	и пример входных данных, для которых она работает неправильно. Исправьте программу.

кодыкомпетенций8=ОПК-2, ПК-1
показатель8=владеть навыками написания небольших программ на языках Питон и Си++ с использованием условного оператора и различных видов циклов;
тема8=1, 4
задания8=Натуральное число называется совершенным, если оно равно сумме всех своих делителей, включая единицу, но исключая себя. Например, число 28 --- совершенное: \[1 + 2 + 4 + 7 + 14 = 28.\] Напечатать все совершенные числа, меньшие заданного с клавиатуры числа $N$.

кодыкомпетенций9=ОПК-2, ПК-1
показатель9=владеть навыками написания небольших программ на языках Питон и Си++ с использованием условного оператора и различных видов циклов;
тема9=2, 5
задания9=Ввести строку. Гарантируется, что в ней только пробелы и латинские буквы. Подсчитать число слов в строке.

кодыкомпетенций10=ОПК-2, ПК-1
показатель10=владеть навыками написания небольших программ на языках Питон и Си++ с использованием условного оператора и различных видов циклов;
тема10=2 
задания10=Ввести с клавиатуры положительное целое $n$, а затем $n$ целых чисел. Найти любое наиболее часто встречающееся число, используя словарь.

кодыкомпетенций11=ОПК-2, ПК-1
показатель11=уметь сравнивать два алгоритма для решения несложной задачи;
тема11=5
задания11=Сравните два алгоритма для подсчета количества различных чисел в массиве 
    {\tt A} длины {\tt n} неотрицательных чисел, меньших {\tt N}:\newline
	\verb!const int N = ...;!\newline
	\verb!int uniq1(int n, int *A) {!\newline
	\verb!  int i, j, res = 0;!\newline
	\verb!  for (i=0; i < n; ++i){!\newline
	\verb!    bool last = true;!\newline
	\verb!    for (j=i+1; j < n; ++j)!\newline
	\verb!      if (A[i]==A[j]) last=false;!\newline
	\verb!    if (last) res++;!\newline
	\verb!  }!\newline
	\verb!  return res;!\newline
	\verb!}!\newline
	\verb!int uniq2(int n, int *A) {!\newline
	\verb!  int i, res = 0;!\newline
	\verb!  bool* h = new bool[N];!\newline
	\verb!  for (i=0; i<N; ++i) h[i] = 0;!\newline
	\verb!  for (i=0; i<n; ++i) h[A[i]] = 1;!\newline
	\verb!  for (i=0; i<n; ++i) res += h[i];!\newline
	\verb!  return res;!\newline
	\verb!}!\newline
	Приведите примеры, когда каждый из алгоритмов совершает меньше действий, чем второй. При каких условиях лучше тот или другой?

кодыкомпетенций12=ОПК-2, ПК-1
показатель12=владеть навыками написания небольших программ на языках Питон и Си++ с использованием условного оператора и различных видов циклов;
тема12=8
задания12=Со стандартного ввода вводится число $n>0$, затем $n$ целых чисел. 
	Найдите максимум отрицательных чисел, с обязательным использованием
	следующих элементов: потокового ввода (\texttt{<iostream>}), векторов и итераторов (\texttt{<vector>}).
	Если отрицательные числа не вводились, выведите \texttt{"ERROR"}.



[Типовые задания доп]
текст = \subsubsection*{Вопросы к экзамену за I семестр}
	\begin{enumerate}
	\item
	Типы в языке Питон. Динамическая типизация. \texttt{int}, \texttt{float}, \texttt{bool}, \texttt{str}, \texttt{NoneType}. Явное преобразование типов. Функции \texttt{type()}, \texttt{dir()}, \texttt{help()}.
	\item
	Числовые типы \texttt{int}, \texttt{bool}, \texttt{float}. Преобразование числовых типов друг в друга. Числовые операторы, в том числе степень, деление нацело, остаток по модулю, побитовые сдвиги влево и вправо.
	\item
	Логический тип \texttt{bool}. Преобразование числовых, строковых значений и \texttt{None} в \texttt{bool}. Логические операторы.
	\item
	Операторы \texttt{if}, \texttt{while}. Отступы и блоки. Пример.
	\item
	Оператор \texttt{while}. Нахождение НОД двух положительных целых чисел.
	\item
	Кортежи, присваивание и распаковка кортежей. Списки и строки. Присваивание списков. Изменяемые и неизменяемые типы. Функция \texttt{append()}.  Длина. Индексация, отрицательные индексы, диапазоны, шаг. Пропуск начального, конечного значений диапазона индексов. Оператор \texttt{in}. Сложение и умножение на число для кортежей, списков и строк.
	\item
	Списки. Присваивание списков. Функция \texttt{append()}. Индексация, длина, отрицательные индексы, диапазоны, шаг. Пропуск начального, конечного значений диапазона индексов. Ввод числового списка с клавиатуры. Перечисления, отбор значений, примеры.
	\item
	Списки. Присваивание списков. Ввод числового списка с клавиатуры. Порождение списка случайных чисел заданной длины. Нахождение максимума, минимума и среднего арифметического для числового списка.
	\item
	Оператор \texttt{for}. Объекты \texttt{range}. Начальное значение, шаг. Перебор символов строки. Перебор строк файла.
	\item
	Двумерные массивы в виде списков. Инициализация нулевой матрицы $m \times n$. Ввод матрицы с клавиатуры, $m$ строк по $n$ значений в строке.
	\item
	Функции. Параметры. Видимость переменных, глобальные и локальные переменные. Примеры.
	\item
	Словари. Допустимые типы ключей. Проверка наличия ключа в словаре. Перебор словаря, функция \texttt{items()}.
	\item
	Рекурсия. Примеры: рекурсивное вычисления максимума, минимума, факториала, чисел Фибоначчи; печать ключей бинарного дерева, заданного в виде словаря. 
	\item
	Пузырьковая сортировка. Количество действий для массива длины $n$.
	\item
	Быстрая сортировка. Упорядочение числового массива на три части относительно выбранного срединного значения. 
	\end{enumerate}
	{}
	\subsubsection*{Вопросы к экзамену за II семестр}
	\begin{enumerate}
	\item
	Состав языка Си. Алфавит языка. Идентификаторы. Ключевые слова. Комментарии.
	\item
	Типы данных. Стандартные типы (целые, со знаком и без, вещественные, \texttt{char}, \texttt{bool}).
	\item
	Пользовательские типы данных. Переименование типов. Перечисления (\texttt{enum}), структуры (\texttt{struct}), объединения (\texttt{union}).
	\item
	Операции. Операторы. Составной оператор.
	\item
	Алгебраические выражения, их типы и правила вычисления. Функции стандартной библиотеки из \texttt{<math.h>}.
	\item
	Логические выражения, их типы и правила вычисления.
	\item
	Инициализация переменных (стандартных, строк, массивов).
	\item
	Условные операторы. Оператор безусловного перехода. Оператор выбора.
	\item
	Программы циклической структуры. Оператор цикла с параметром (\texttt{for}).
	\item
	Программы циклической структуры. Оператор цикла с предусловием (\texttt{while}).
	\item
	Программы циклической структуры. Оператор цикла с постусловием \texttt{do}-\texttt{while} (\texttt{repeat}).
	\item
	Структурированные типы данных. Массивы. Описание типа. Действия над массивами. Действия над элементами массива.
	\item
	Функции стандартной библиотеки для работы со строками и символами.
	\item
	Динамические структуры. Очереди.
	\item
	Текстовые файлы.
	\item
	Бинарные файлы.
	\item
	Объектно-ориентированное программирование. Классы. Наследование. Конструкторы и деструкторы.
	\item
	Перегрузка операций.
	\item
	Перегрузка функций, шаблоны функций.
	\item
	Динамические структуры. Дерево.
	\item
	Рекуррентные формулы. Вычисление конечных сумм и произведений.
	\item
	Рекуррентные формулы. Приближенное Вычисление бесконечных сумм и произведений.
	\item
	Перевод целого числа из десятичной системы счисления (СС) в десятчную СС. Перевод целого числа из десятичной системы счисления в $p$-ичную СС.
	\item
	Решето Эратосфена.
	\item
	Сортировка методом обмена (пузырька).
	\item
	Сортировка методом выбора.
	\item
	Сортировка методом вставки.
	\item
	Быстрая сортировка Хоара.
	\item
	Задачи поиска. Линейный поиск. Бинарный поиск.
	\item
	Реализация динамических структур с помощью массивов. Стеки.
	\item
	Обратная польская запись.
	\item
	Схема Горнера. Перевод числа из p-ичной системы счисления в десятичную.
	\item
	Определение площади произвольного n-угольника (без самопересечений).
	\item
	Перевод целого числа из двоичной СС в десятчную СС.
	\item
	Перевод целого числа из десятичной СС в $p$-ичную СС.
	\item
	Перевод целого числа из p-чной СС в десятичную СС.
	\item
	Задачи поиска. Бинарный поиск.
	\item
	Задача о восьми ферзях.
	\item
	Схема Горнера. Вычисление значения многочлена $n$-й степени.
	\end{enumerate}


[Процедуры оценивания]
список =\textit{Лабораторные работы.}\/ Во время лабораторных занятий по каждой теме 
	обучающиеся должны самостоятельно написать программы для задач в
	описании лабораторной работы.  Решения сдаются лично преподавателю или отправляются
	через веб-браузер в автоматизированную проверяющую систему <<Мультиметр>>. Задания очередной
	лабораторной работы могут быть сданы не позднее следующего лабораторного занятия.
	\par
	\textit{Домашние задания.}\/ Домашние задания выполняются по индивидуальным вариантам. 
	Срок сдачи очередного комплекта домашних заданий --- как правило, не позднее двух 
	недель после его выдачи. Каждое задание сдается преподавателю лично. 
	\par
	\textit{Онлайн-тестирование.}\/ Данная форма текущего контроля направлена на оценку основных 
	теоретических знаний обучающегося по мере освоения разделов дисциплины. Предполагает 
	ответы на вопросы теста через веб-формы, например Google Forms, либо
	исправление и сдачу выданных <<заготовок>> (незаконечнных программ или 
	программ с дефектами) в автоматизированной проверяющей системе <<Мультиметр>>.
	\par        
	\textit{Форма промежуточной аттестации: экзамен.}\/ К экзамену допускаются студенты,
	выполнившие обязательный минимум учебной работы и набравшие в семестре не менее 45~баллов.
	Данный вид комплексного испытания предполагает ответ по билету, содержащему один 
	теоретический и два практических вопроса. Последние предполагают написание программы.
	На экзамене можно набрать до 30 баллов: 9 за теоретический вопрос, 9 и 12 баллов за 
	практические вопросы. 

		
[Литература]
осн = Мозговой М. В. Классика программирования: алгоритмы, языки, автоматы, компиляторы: практический подход. СПб: Наука и Техника, 2006. 320 с. | | 10 |
	  Павловская Т. А. С/С++. СПб.: Питер, 2013. ||13|
доп = Кормен Т.\,Х. Лейзерсон Ч., Ривест Р. Алгоритмы: построение и анализ. М.: МЦНМО, 1999. | | 1 |
	  Кнут, Д. Искусство программирования Т.\,1: Основные алгоритмы. М. 2004. | | 3|
	  Страуструп Б., Язык программирования С++.  М.: Бином, 1999.  | |1|\thispagestyle{empty} 

[Ресурсы Интернет]
список = Шень А.\,Х. Программирование: теоремы и задачи. М.: МЦНМО, 2004. 160 с. \\\texttt{http://www.mccme.ru/free-books/shen/shen-progbook.pdf}
		 Компания Sololearn. Мобильное приложение <<Учим Python>>. \\\texttt{https://play.google.com/store/apps/details?id=com.sololearn.python} или \\\texttt{https://itunes.apple.com/us/app/id953972812} или \\\texttt{http://www.windowsphone.com/s?appid=7bb32109-b882-49c9-8fa2-a500b79a19ca}
		 Онлайн-игра для обучения программированию CodeCombat. \\\texttt{https://codecombat.com/}
		 Игра для обучения программированию Colobot. \\\texttt{https://colobot.info/}

[Материальная база]
список = complab

[Информационные технологии]
инфтех =  использование на занятиях электронных изданий (чтение лекций с использованием слайд-презентаций);
		  ведение учета посещаемости и выполнения учебных заданий в системе Google Docs;
		  написание программ на языках высокого уровня в инструментальных средах; 
		  сдача программ в автоматической проверяющей системе <<Мультиметр>>; 
		  организация взаимодействия с обучающимися посредством электронной почты, специализированного образовательного форума Piazza;
		  компьютерное тестирование.		  
софт =    Язык программирования Python, среда IDLE;
		  Среда Visual Studio с компилятором Visual C++, или среда CodeBlocks с компилятором GNU C++; 
		  интернет-браузер.
